{"meta":{"title":"CatchLife","subtitle":"一个程序员的自我修养","description":"专注于研究编程技术","author":"Catch","url":"https://catch.wenzuo.net","root":"/"},"pages":[{"title":"关于","date":"2019-06-12T06:51:46.369Z","updated":"2019-06-12T06:51:46.369Z","comments":true,"path":"about/index.html","permalink":"https://catch.wenzuo.net/about/index.html","excerpt":"","text":"123456789101112131415161718192021222324252627public class Me &#123; private String name = \"Catch\"; private int age = 27; private String gender = \"男\"; private String profession = \"Java Developer\"; private String experience = \"5年\"; private String address = \"北京\"; private String education = \"本科\"; private String github = \"https://github.com/catchlife\"; private String blog = \"http://catch.wenzuo.net\"; private String email = \"catchlife6@163.com\"; private String description = \"一个专注于编程技术的宅男\"; private String[] skills = &#123; \"Java\", \"Spring\", \"JFinal\", \"HTML\", \"Javascript\", \"CSS3\", \"Vue.js\", \"Python\" &#125;; private String[] devTools = &#123; \"IDEA\", \"WebStorm\", \"Pycharm\", \"VSCode\", \"Sublime Text3\", \"HediSQL\", \"Jetty\", \"Tomcat\" &#125;;&#125;"},{"title":"分类","date":"2019-06-12T06:51:46.369Z","updated":"2019-06-12T06:51:46.369Z","comments":false,"path":"categories/index.html","permalink":"https://catch.wenzuo.net/categories/index.html","excerpt":"","text":""},{"title":"友链","date":"2019-06-12T06:51:46.369Z","updated":"2019-06-12T06:51:46.369Z","comments":true,"path":"links/index.html","permalink":"https://catch.wenzuo.net/links/index.html","excerpt":"","text":""},{"title":"项目","date":"2019-06-12T06:51:46.369Z","updated":"2019-06-12T06:51:46.369Z","comments":false,"path":"repository/index.html","permalink":"https://catch.wenzuo.net/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-06-12T06:51:46.369Z","updated":"2019-06-12T06:51:46.369Z","comments":false,"path":"tags/index.html","permalink":"https://catch.wenzuo.net/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"wget 命令详解","slug":"wget-命令详解","date":"2019-03-28T10:54:48.000Z","updated":"2019-06-12T06:51:46.369Z","comments":true,"path":"2019/03/28/wget-命令详解/","link":"","permalink":"https://catch.wenzuo.net/2019/03/28/wget-命令详解/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182启动： -V, --version 显示 Wget 的版本信息并退出 -h, --help 打印此帮助 -b, --background 启动后转入后台 -e, --execute=命令 运行一个“.wgetrc”风格的命令日志和输入文件： -o, --output-file=文件 将日志信息写入 FILE -a, --append-output=文件 将信息添加至 FILE -d, --debug 打印大量调试信息 -q, --quiet 安静模式 (无信息输出) -v, --verbose 详尽的输出 (此为默认值) -nv, --no-verbose 关闭详尽输出，但不进入安静模式 --report-speed=类型 以 &lt;类型&gt; 报告带宽。类型可以是 bits -i, --input-file=文件 下载本地或外部 &lt;文件&gt; 中的 URL -F, --force-html 把输入文件当成 HTML 文件 -B, --base=URL 解析相对于 URL 的 HTML 输入文件链接 (-i -F) --config=文件 指定要使用的配置文件 --no-cookies 不读取任何配置文件 --rejected-log=文件 将拒绝 URL 的原因写入 &lt;文件&gt;。下载： -t, --tries=数字 设置重试次数为 &lt;数字&gt; (0 代表无限制) --retry-connrefused 即使拒绝连接也是重试 --retry-on-http-error=ERRORS comma-separated list of HTTP errors to retry -O, --output-document=文件 将文档写入 FILE -nc, --no-clobber 不要下载已存在将被覆盖的文件 --no-netrc don&apos;t try to obtain credentials from .netrc -c, --continue 断点续传下载文件 --start-pos=偏移量 从由零计数的 &lt;偏移量&gt; 开始下载 --progress=类型 选择进度条类型 --show-progress 在任意啰嗦状态下都显示进度条 -N, --timestamping 只获取比本地文件新的文件 --no-if-modified-since 不要在时间戳 (timestamping) 模式下使用 if-modified-since get 条件请求 --no-use-server-timestamps 不用服务器上的时间戳来设置本地文件 -S, --server-response 打印服务器响应 --spider 不下载任何文件 -T, --timeout=SECONDS 将所有超时设为 SECONDS 秒 --dns-timeout=SECS 设置 DNS 查寻超时为 SECS 秒 --connect-timeout=SECS 设置连接超时为 SECS 秒 --read-timeout=SECS 设置读取超时为 SECS 秒 -w, --wait=SECONDS 等待间隔为 SECONDS 秒 --waitretry=SECONDS 在获取文件的重试期间等待 1..SECONDS 秒 --random-wait 获取多个文件时，每次随机等待间隔 (0.5~1.5)*WAIT 秒 --no-proxy 禁止使用代理 -Q, --quota=数字 设置获取配额为 &lt;数字&gt; 字节 --bind-address=ADDRESS 绑定至本地主机上的 ADDRESS (主机名或是 IP) --limit-rate=RATE 限制下载速率为 RATE --no-dns-cache 关闭 DNS 查询缓存 --restrict-file-names=系统 限定文件名中的字符为 &lt;系统&gt; 允许的字符 --ignore-case 匹配文件/目录时忽略大小写 -4, --inet4-only 仅连接至 IPv4 地址 -6, --inet6-only 仅连接至 IPv6 地址 --prefer-family=地址族 首先连接至指定家族（IPv6，IPv4 或 none）的地址 --user=用户 将 ftp 和 http 的用户名均设置为 &lt;用户&gt; --password=密码 将 ftp 和 http 的密码均设置为 &lt;密码&gt; --ask-password 提示输入密码 --use-askpass=命令 指定用于请求用户名和密码的凭据管理器。 如果没有提供指定命令，程序将使用 WGET_ASKPASS 或 SSH_ASKPASS 环境变量。 --no-iri 关闭 IRI 支持 --local-encoding=ENC 使用 ENC 作为 IRI (国际化资源标识符) 的本地编码 --remote-encoding=ENC 使用 ENC 作为默认远程编码 --unlink 覆盖前移除文件 --no-xattr 不要在文件的拓展属性中储存元数据目录： -nd, --no-directories 不创建目录 -x, --force-directories 强制创建目录 -nH, --no-host-directories 不要创建主 (host) 目录 --protocol-directories 在目录中使用协议名称 -P, --directory-prefix=前缀 保存文件到 &lt;前缀&gt;/.. --cut-dirs=数字 忽略远程目录中 &lt;数字&gt; 个目录层。HTTP 选项： --http-user=用户 设置 http 用户名为 &lt;用户&gt; --http-password=密码 设置 http 密码为 &lt;密码&gt; --no-cache 不使用服务器缓存的数据。 --default-page=NAME 改变默认页 (通常是“index.html”)。 -E, --adjust-extension 以合适的扩展名保存 HTML/CSS 文档 --ignore-length 忽略头部的‘Content-Length’区域 --header=字符串 在头部插入 &lt;字符串&gt; --compression=TYPE choose compression, one of auto, gzip and none. (default: none) --max-redirect 每页所允许的最大重定向 --proxy-user=用户 使用 &lt;用户&gt; 作为代理用户名 --proxy-password=密码 使用 &lt;密码&gt; 作为代理密码 --referer=URL 在 HTTP 请求头包含‘Referer: URL’ --save-headers 将 HTTP 头保存至文件。 -U, --user-agent=代理 标识自己为 &lt;代理&gt; 而不是 Wget/VERSION。 --no-http-keep-alive 禁用 HTTP keep-alive (持久连接)。 --no-cookies 不使用 cookies。 --load-cookies=文件 会话开始前从 &lt;文件&gt; 中载入 cookies。 --save-cookies=文件 会话结束后保存 cookies 至 FILE。 --keep-session-cookies 载入并保存会话 (非永久) cookies。 --post-data=字符串 使用 POST 方式；把 &lt;字串&gt;作为数据发送。 --post-file=文件 使用 POST 方式；发送 &lt;文件&gt; 内容。 --method=HTTP方法 在请求中使用指定的 &lt;HTTP 方法&gt;。 --post-data=字符串 把 &lt;字串&gt; 作为数据发送，必须设置 --method --post-file=文件 发送 &lt;文件&gt; 内容，必须设置 --method --content-disposition 当选择本地文件名时允许 Content-Disposition 头部 (实验中)。 --content-on-error 在服务器错误时输出接收到的内容 --auth-no-challenge 不先等待服务器询问就发送基本 HTTP 验证信息。HTTPS (SSL/TLS) 选项： --secure-protocol=PR choose secure protocol, one of auto, SSLv2, SSLv3, TLSv1, TLSv1_1, TLSv1_2 and PFS --https-only 只跟随安全的 HTTPS 链接 --no-check-certificate 不要验证服务器的证书。 --certificate=文件 客户端证书文件。 --certificate-type=类型 客户端证书类型，PEM 或 DER。 --private-key=文件 私钥文件。 --private-key-type=类型 私钥文件类型，PEM 或 DER。 --ca-certificate=文件 带有一组 CA 证书的文件。 --ca-directory=DIR 保存 CA 证书的哈希列表的目录。 --ca-certificate=文件 带有一组 CA 证书的文件。 --pinnedpubkey=文件/散列值 用于验证节点的公钥（PEM/DER）文件或 任何数量的 sha256 散列值，以 base64 编码、 “sha256//” 开头、用“;”间隔 --ciphers=STR Set the priority string (GnuTLS) or cipher list string (OpenSSL) directly. Use with care. This option overrides --secure-protocol. The format and syntax of this string depend on the specific SSL/TLS engine.HSTS 选项： --no-hsts 禁用 HSTS --hsts-file HSTS 数据库路径（将覆盖默认值）FTP 选项： --ftp-user=用户 设置 ftp 用户名为 &lt;用户&gt;。 --ftp-password=密码 设置 ftp 密码为 &lt;密码&gt; --no-remove-listing 不要删除‘.listing’文件 --no-glob 不在 FTP 文件名中使用通配符展开 --no-passive-ftp 禁用“passive”传输模式 --preserve-permissions 保留远程文件的权限 --retr-symlinks 递归目录时，获取链接的文件 (而非目录)FTPS 选项： --ftps-implicit 使用隐式 FTPS（默认端口 990） --ftps-resume-ssl 打开数据连接时继续控制连接中的 SSL/TLS 会话 --ftps-clear-data-connection 只加密控制信道；数据传输使用明文 --ftps-fallback-to-ftp 回落到 FTP，如果目标服务器不支持 FTPSWARC 选项： --warc-file=文件名 在一个 .warc.gz 文件里保持请求/响应数据 --warc-header=字符串 在头部插入 &lt;字符串&gt; --warc-max-size=数字 将 WARC 的最大尺寸设置为 &lt;数字&gt; --warc-cdx 写入 CDX 索引文件 --warc-dedup=文件名 不要记录列在此 CDX 文件内的记录 --no-warc-compression 不要 GZIP 压缩 WARC 文件 --no-warc-digests 不要计算 SHA1 摘要 --no-warc-keep-log 不要在 WARC 记录中存储日志文件 --warc-tempdir=目录 WARC 写入器的临时文件目录递归下载： -r, --recursive 指定递归下载 -l, --level=数字 最大递归深度 (inf 或 0 代表无限制，即全部下载)。 --delete-after 下载完成后删除本地文件 -k, --convert-links 让下载得到的 HTML 或 CSS 中的链接指向本地文件 --convert-file-only 只转换 URL 的文件部分（一般叫做“基础名”/basename） --backups=N 写入文件 X 前，轮换移动最多 N 个备份文件 -K, --backup-converted 在转换文件 X 前先将它备份为 X.orig。 -m, --mirror -N -r -l inf --no-remove-listing 的缩写形式。 -p, --page-requisites 下载所有用于显示 HTML 页面的图片之类的元素。 --strict-comments 用严格方式 (SGML) 处理 HTML 注释。递归接受/拒绝： -A, --accept=列表 逗号分隔的可接受的扩展名列表 -R, --reject=列表 逗号分隔的要拒绝的扩展名列表 --accept-regex=REGEX 匹配接受的 URL 的正则表达式 --reject-regex=REGEX 匹配拒绝的 URL 的正则表达式 --regex-type=类型 正则类型 (posix|pcre) -D, --domains=列表 逗号分隔的可接受的域名列表 --exclude-domains=列表 逗号分隔的要拒绝的域名列表 --follow-ftp 跟踪 HTML 文档中的 FTP 链接 --follow-tags=列表 逗号分隔的跟踪的 HTML 标识列表 --ignore-tags=列表 逗号分隔的忽略的 HTML 标识列表 -H, --span-hosts 递归时转向外部主机 -L, --relative 仅跟踪相对链接 -I, --include-directories=列表 允许目录的列表 --trust-server-names 使用重定向 URL 的最后一段作为本地文件名 -X, --exclude-directories=列表 排除目录的列表 -np, --no-parent 不追溯至父目录","categories":[{"name":"工作笔记","slug":"工作笔记","permalink":"https://catch.wenzuo.net/categories/工作笔记/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://catch.wenzuo.net/tags/Linux/"}]},{"title":"shell 判断文件夹或文件是否存在","slug":"shell-判断文件夹或文件是否存在","date":"2019-03-28T10:48:51.000Z","updated":"2019-06-12T06:51:46.369Z","comments":true,"path":"2019/03/28/shell-判断文件夹或文件是否存在/","link":"","permalink":"https://catch.wenzuo.net/2019/03/28/shell-判断文件夹或文件是否存在/","excerpt":"","text":"判断文件夹是否存在12345if [ -d \"/data/\" ];thenecho \"文件夹存在\"elseecho \"文件夹不存在\"fi判断文件是否存在12345if [ -f \"/data/filename\" ];thenecho \"文件存在\"elseecho \"文件不存在\"fi文件比较符12345678910111213-e 判断对象是否存在-d 判断对象是否存在，并且为目录-f 判断对象是否存在，并且为常规文件-L 判断对象是否存在，并且为符号链接-h 判断对象是否存在，并且为软链接-s 判断对象是否存在，并且长度不为0-r 判断对象是否存在，并且可读-w 判断对象是否存在，并且可写-x 判断对象是否存在，并且可执行-O 判断对象是否存在，并且属于当前用户-G 判断对象是否存在，并且属于当前用户组-nt 判断file1是否比file2新 [ \"/data/file1\" -nt \"/data/file2\" ]-ot 判断file1是否比file2旧 [ \"/data/file1\" -ot \"/data/file2\" ]","categories":[{"name":"工作笔记","slug":"工作笔记","permalink":"https://catch.wenzuo.net/categories/工作笔记/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://catch.wenzuo.net/tags/Linux/"}]},{"title":"hexo-theme-pure源码修改记录--为部署到阿里云oss做准备","slug":"hexo-theme-pure源码修改记录-为部署到阿里云oss做准备","date":"2019-03-27T15:41:06.000Z","updated":"2019-06-12T06:51:46.369Z","comments":true,"path":"2019/03/27/hexo-theme-pure源码修改记录-为部署到阿里云oss做准备/","link":"","permalink":"https://catch.wenzuo.net/2019/03/27/hexo-theme-pure源码修改记录-为部署到阿里云oss做准备/","excerpt":"","text":"由于oss要求访问必须是绝对文件路径，不能自动寻找index.html，所以修改源码，把hexo主题中xxx/格式改为xx/index.html，方便接下来主题升级时修改对应文件。修改以下文件，在路径变量后添加index.html12345678910111213141516\\themes\\pure\\layout\\_common\\header.ejs\\themes\\pure\\layout\\_partial\\archive-post.ejs\\themes\\pure\\layout\\_partial\\item-post.ejs\\themes\\pure\\layout\\_partial\\pagination.ejs\\themes\\pure\\layout\\_partial\\post\\copyright.ejs\\themes\\pure\\layout\\_partial\\post\\date.ejs\\themes\\pure\\layout\\_partial\\post\\nav.ejs\\themes\\pure\\layout\\_partial\\post\\thumbnail.ejs\\themes\\pure\\layout\\_partial\\post\\title.ejs\\themes\\pure\\layout\\_widget\\recent_posts.ejs\\themes\\pure\\layout\\categories.ejs\\themes\\pure\\layout\\category.ejs\\themes\\pure\\layout\\tag.ejs\\themes\\pure\\layout\\tags.ejs\\themes\\pure\\source\\js\\insight.js","categories":[{"name":"工作笔记","slug":"工作笔记","permalink":"https://catch.wenzuo.net/categories/工作笔记/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://catch.wenzuo.net/tags/hexo/"}]},{"title":"Git创建空白分支","slug":"Git创建空白分支","date":"2019-01-24T10:30:57.000Z","updated":"2019-06-12T06:51:46.369Z","comments":true,"path":"2019/01/24/Git创建空白分支/","link":"","permalink":"https://catch.wenzuo.net/2019/01/24/Git创建空白分支/","excerpt":"","text":"今天在部署hexo的博客的时候，需要在github上创建两个分支：一个是发布分支 master 一个是源码分支source。这就需要开一个空白分支，具体方法如下：12345678910# 在 git 上创建项目的时候可以选择添加一个 readme.md，然后 clone 下来git clone https://github.com/CatchLife/catchlife.github.io# 切换到 source 分支git checkout --orphan source# 清空文件git rm -rf .# 把源码文件放进去，或者直接修改 readme.md 文件，然后 提交到远程git add .git commit -m \"init\"git push origin source","categories":[{"name":"工作笔记","slug":"工作笔记","permalink":"https://catch.wenzuo.net/categories/工作笔记/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://catch.wenzuo.net/tags/Git/"}]},{"title":"解决deepin下sudo: add-apt-repository：找不到命令","slug":"解决deepin下sudo-add-apt-repository：找不到命令","date":"2018-12-06T10:30:18.000Z","updated":"2019-06-12T06:51:46.369Z","comments":true,"path":"2018/12/06/解决deepin下sudo-add-apt-repository：找不到命令/","link":"","permalink":"https://catch.wenzuo.net/2018/12/06/解决deepin下sudo-add-apt-repository：找不到命令/","excerpt":"","text":"因为 deepin 自身没有支持这个命令，需要手动安装，执行如下命令就可以正常使用了12sudo apt-get install python-software-propertiessudo apt-get install software-properties-common","categories":[{"name":"工作笔记","slug":"工作笔记","permalink":"https://catch.wenzuo.net/categories/工作笔记/"}],"tags":[{"name":"Deepin","slug":"Deepin","permalink":"https://catch.wenzuo.net/tags/Deepin/"}]}]}